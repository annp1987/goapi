package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\xcd\x6e\xda\x40\x10\xc7\xef\x7e\x8a\xd5\xb6\x47\x14\xd3\xa8\xea\x81\x5b\xd5\x5e\xaa\xaa\x97\x48\xed\xa5\x8a\xd0\x60\x0f\x66\x83\xd9\x5d\x76\xc6\x24\x28\xf2\xbb\x57\x6b\x9b\x78\x4d\x21\x18\x42\x9a\x1e\xe0\x80\xcc\xce\xfc\x87\xf9\xf8\x79\xbd\x7e\x8c\x84\x90\x74\x0f\x59\x86\x4e\x8e\x84\xbc\xbe\x1a\xca\x81\x5f\x53\x7a\x6a\xe4\x48\x78\xbb\x10\x92\x15\xe7\xe8\xed\xf8\x00\x0b\x9b\x63\x6c\x27\x31\x58\x7b\x65\x9d\x61\x53\x09\x84\x90\x2b\x74\xa4\x8c\xf6\x6e\xcd\xa5\xd0\x86\x05\x21\xcb\x48\x88\xb2\x0a\x4b\xc9\x0c\x17\x48\x72\x24\x7e\xd7\xa2\x19\xb3\xdd\x04\xf0\xd7\xe4\x7d\x6f\x2b\xdf\xc4\x68\x2a\x3a\xce\x60\x6d\xae\x12\x60\x65\x74\x7c\x47\x46\xb7\xbe\xd6\x99\xb4\x48\x7a\xfa\x02\xcf\xa8\xad\x2d\x5e\x7d\x88\xa1\xe0\xd9\xd3\x8a\x77\x31\xc4\xc1\x6f\x21\xa4\xb1\xe8\xaa\x60\xdf\x52\x5f\xe0\x67\x2f\x18\xb4\x66\x87\x64\x8d\x26\xa4\x8e\x4a\x08\x79\x3d\x1c\x6e\x2d\x09\x21\x53\xa4\xc4\x29\xcb\x4d\xb7\x82\x40\x95\xb9\x6a\x12\xfc\x25\x13\x42\xbe\x77\x38\xf5\x8a\x77\x71\x8a\x53\xa5\x95\x8f\x40\x7e\x12\x3e\x9f\x9b\x26\x87\x1f\x48\x04\x19\xca\x8e\xb8\x8c\x76\x5d\x97\x41\x09\x16\x1c\x2c\x90\xd1\xb5\x4d\xac\x3f\x5b\xc9\x6b\x58\x54\x28\x4c\x4c\xba\xde\xce\x5c\xe9\x7d\x16\x87\xcb\x42\x39\xf4\xcd\x63\x57\xe0\xb9\x2a\x5e\x16\x48\x7c\x44\xc1\xb7\x41\xc1\x0c\xd9\x76\xa9\xf5\x5c\x5b\xef\x28\xd4\x37\xcd\xaa\x80\x99\xe3\x7a\x05\x79\xfc\x38\xc7\x75\x19\x82\x93\xe1\xf3\xdc\x7c\xc7\xf5\x2f\xc8\x6f\x10\xd2\xff\x89\x9e\x3a\xab\x7f\xc4\xcd\x1c\xf7\x60\xe3\xef\xcb\xe3\xb0\xe1\xb5\xad\x42\x12\x3b\xa5\xb3\x30\xf1\x72\x70\x38\x91\x15\xe4\x05\xee\x4e\x65\x59\xa0\x7b\x0e\xe1\x29\xe4\x74\x44\x32\xbd\xf1\xab\x07\xb1\x03\xc0\x8d\x4e\xa6\x98\x23\x63\x0f\xc6\xbe\xd6\x8e\x17\xca\x9e\x4c\xaf\x40\xd9\x19\x07\x7b\xf0\x91\x53\x87\xf8\x69\x53\xb8\x8c\x35\x34\xbd\xcd\xe6\xf1\xc6\x4f\xbf\xa3\x9b\x7e\x06\x40\x8b\x3e\x7c\x7e\x71\x78\xe1\xb3\x63\xba\xf0\xf9\xaa\x7c\x46\x9b\xef\xfa\x05\x23\xc8\xa3\x3d\xe2\xef\x3e\x2e\x06\xc7\xb6\x4d\xaf\xcd\xe4\x0e\x13\x96\x2d\xf3\xce\x43\xce\x6a\x0b\x5e\x99\x39\xd0\x3c\x6e\x54\x1d\xa8\xf7\x4d\x2d\x84\xaa\x20\x74\xcd\x9c\x8e\xd6\x5a\x20\xba\x37\x2e\xed\xad\xdd\x79\x84\xdd\xf3\xc6\xf0\x82\x8e\x40\x92\x20\xd1\x98\xcd\x1c\xf5\x29\x75\x55\xc2\x93\x3b\x8a\x0f\x56\x39\xa4\xb1\x3a\xf4\xdf\x21\xd9\x72\x6a\xdc\x02\xfc\xa6\x26\x95\xe6\x4f\x1f\x7b\x34\xad\x8b\xf5\x0b\xda\xe5\xf7\x89\x13\xea\xac\x8f\xac\xa7\x8d\xde\xdf\x22\x51\x19\xfd\x09\x00\x00\xff\xff\x1a\x0d\x84\x8f\xf2\x0f\x00\x00")

func swagger_json() ([]byte, error) {
	return bindata_read(
		_swagger_json,
		"swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"swagger.json": swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"swagger.json": &_bintree_t{swagger_json, map[string]*_bintree_t{}},
}}
