package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\xc3\x44\x10\xbd\xe7\x57\x8c\xb6\x1c\xa8\x14\xec\xb6\x44\x45\xe4\x86\x42\x41\x08\x71\xa9\x04\x17\x5a\x55\x5b\x7b\x62\x6f\xb3\xde\xdd\xee\x8c\x13\x4c\x95\xff\x8e\xd6\x4e\xb0\x1d\x92\xd0\xb4\x81\xf6\x90\x1e\xaa\xcd\xce\x87\xdf\xcc\x7b\xfb\xf5\x32\x00\x10\xb4\x90\x59\x86\x5e\x8c\x41\x5c\x45\x17\x62\x18\xe6\x94\x99\x5a\x31\x86\x60\x07\x10\xac\x58\x63\xb0\x4b\xe7\x62\xf7\x18\x4b\xe7\x22\xe7\x2d\xdb\xda\x19\x40\xcc\xd1\x93\xb2\x26\xb8\xac\x86\x60\x2c\x03\x21\x8b\x01\xc0\xb2\x4e\x49\x49\x8e\x05\x92\x18\xc3\xef\x4d\x50\xce\xec\xd6\x09\xc2\x98\x82\xef\x7d\xed\x9b\x58\x43\x65\xcf\x59\x3a\xa7\x55\x22\x59\x59\x13\x3f\x91\x35\xad\xaf\xf3\x36\x2d\x93\x57\xfa\x4a\xce\xa9\xad\x2b\x9e\x5f\xc6\xb2\xe4\xfc\xef\x99\xe0\x62\x89\x3b\xbf\x01\x84\x75\xe8\xeb\x64\x3f\xa5\xa1\xc0\xef\x42\xc0\xb0\x35\x7b\x24\x67\x0d\x21\xf5\xa2\x00\xc4\xd5\xc5\xc5\xc6\x14\x80\x48\x91\x12\xaf\x1c\xaf\xba\xd5\x49\x54\x9b\xeb\x26\xc9\x7f\x84\x01\x88\x2f\x3c\x4e\x43\xc4\x59\x9c\xe2\x54\x19\x15\x32\x50\x60\x22\xe0\xb9\x5d\x61\xf8\x05\x89\x64\x86\xa2\x17\xbc\x1c\x6c\x1b\x2f\x3b\x25\x38\xe9\x65\x81\x8c\xbe\x6d\x62\xf3\xb7\x01\xde\xc8\xa2\x96\xc1\xa3\x4d\xab\x4d\xe4\xca\xec\xb2\x78\x7c\x2e\x95\xc7\xd0\x3c\xf6\x25\x1e\xab\xe2\xe7\x12\x89\x0f\x28\xf8\xbe\x53\x30\xcb\x6c\xb3\xd4\x86\xd7\xd6\x7b\xd0\x8d\x5f\x35\xab\x16\xcc\x0c\xab\xb9\xd4\xf1\xcb\x0c\xab\x65\x57\x38\x19\xee\xd7\xcd\xcf\x58\xfd\x26\xf5\x2d\xca\xf4\x33\xa9\xa7\x41\xf5\x3f\xe9\x66\x86\x3b\x64\x13\xd6\xe5\x61\xb2\xe1\xca\xd5\x29\x89\xbd\x32\xd9\x66\xec\xd4\xfa\x42\x72\xc7\xfe\x26\x45\x34\xbd\xd9\xa2\x89\x75\x9c\x48\x51\x23\xe3\x2b\x68\xff\xbe\x71\xfc\x44\xc4\xdf\x14\x8e\xab\x13\xef\x6f\xe3\xfd\x5f\x0f\x89\x26\xc5\xaf\x2e\x95\x27\xd6\x3b\xa6\x0f\x60\x7d\xf8\xe9\x8f\xb3\x83\xb7\xe0\x23\xe8\xb7\x7c\x8d\x7c\x27\x1e\x4f\xf2\xed\x9a\x4e\xf2\xfd\x50\xf9\x0e\xd6\xff\x9b\x07\x45\x07\x47\x7b\xa5\xdf\x7e\x3d\xec\x5c\xd3\xd6\x5c\xd8\xc7\x27\x4c\x58\xb4\x4b\xc2\x87\x35\xc0\x6a\x43\xdb\x22\xf3\xd2\xf0\xc3\x2a\xaa\xa7\xf9\x3d\xac\xee\xe1\xb4\x2f\x49\xa2\x85\xf5\xe9\xf1\x33\x97\x84\x7e\xa5\x8f\x63\x64\xde\x72\xf1\xe9\x2d\xed\x1f\xac\xd6\x76\x01\x36\xb4\xfe\x0a\x88\xa5\x49\xa5\x4f\x69\x08\x38\x47\x03\x9c\xdb\x32\xcb\xc1\x58\xf8\xda\xa7\xe0\xa4\xe7\x0a\x64\x92\x20\x11\x28\x82\xb5\x20\xa3\x3b\x33\x29\xbd\x47\xc3\xba\x82\x92\x94\xc9\x80\x54\xe1\xb4\x9a\x2a\x4c\x61\xa2\x15\x1a\x86\x89\xc7\x14\x0d\x2b\xa9\x09\x7e\x0c\xcc\x8c\xef\xcc\x97\xf5\xe3\x71\x1c\xc7\x6c\xad\xa6\x48\x21\x4f\x23\xeb\xb3\x38\xe7\x42\xc7\x7e\x9a\x5c\x7f\x33\xfa\xf6\x8c\x30\x09\x60\xbf\x1a\x45\xa3\xf3\x08\x6e\xe6\x68\xb8\x94\x5a\x57\x50\xc8\xf0\x35\xbc\x33\x01\xbb\xf5\xea\xcf\x7a\x1b\x84\x89\x4d\xb1\xf9\x02\x2c\x72\x34\x7b\x91\x1f\x8e\xe1\xf2\x3c\x12\xbd\x87\xc5\x8e\x77\xdc\x3b\x74\xdb\xc0\x7c\x60\x3b\x43\x73\x7c\x7d\xe1\x1f\x4e\x79\xa4\x07\xf5\xc6\xdc\xca\xf0\xf5\x68\x7b\xea\x1a\xf1\x31\x17\x5c\x7f\xfb\x68\x1b\xde\x3b\x4c\x76\x77\x7a\x33\xac\xbf\xdf\xbd\x83\xa1\x70\xc0\x1c\x9d\x98\xb9\xd4\xe5\x7f\xd3\xb8\xb0\xef\x0e\x96\x83\xbf\x02\x00\x00\xff\xff\xcb\x3f\x74\xe3\x33\x12\x00\x00")

func swagger_json() ([]byte, error) {
	return bindata_read(
		_swagger_json,
		"swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"swagger.json": swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"swagger.json": &_bintree_t{swagger_json, map[string]*_bintree_t{}},
}}
