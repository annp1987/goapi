package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xb1\x6e\xdb\x40\x0c\xdd\xf5\x15\xc4\xb5\x63\x10\xa5\x19\xb3\x15\x6d\x87\xa2\xe8\x12\xa0\x5d\x8a\x0c\xb4\x44\xcb\x17\x4b\x77\x97\x23\xe5\x40\x08\xfc\xef\xc5\x49\x76\x75\x52\x6d\xd7\x4e\x9c\xc6\x83\x3d\x18\xb2\xf8\x1e\x41\xf2\x3d\x5a\xa7\xa7\x04\x40\xf1\x23\x16\x05\x79\x75\x03\xea\xfa\xf2\x4a\x5d\x84\x7b\xda\x4c\xad\xba\x81\x10\x07\x50\xa2\xa5\xa4\x10\x47\xe7\x52\x37\x49\xd1\xb9\x4b\xe7\xad\xd8\x16\x0c\xa0\x16\xe4\x59\x5b\x13\x20\xab\x4b\x30\x56\x80\x49\x54\x02\xb0\x6c\x53\x72\x36\xa3\x8a\x58\xdd\xc0\xaf\x8e\x34\x13\x71\xeb\x04\xe1\x9a\x03\xf6\xae\xc5\x66\xd6\x70\x3d\x00\xa3\x73\xa5\xce\x50\xb4\x35\xe9\x3d\x5b\xd3\x63\x9d\xb7\x79\x9d\xed\x89\x45\x99\x71\xdf\x57\xba\xf8\x90\x62\x2d\xb3\x3f\x77\x02\xc4\xb2\x44\xbf\x01\x94\x75\xe4\xdb\x64\x5f\xf3\xd0\xe0\xc7\x40\xb8\xe8\xc3\x9e\xd8\x59\xc3\xc4\x03\x16\x80\xba\xbe\xba\x1a\xdd\x02\x50\x39\x71\xe6\xb5\x93\xd5\xb4\xa2\x44\x6d\xb8\x1d\x12\xfe\x45\x03\x50\xef\x3d\x4d\x03\xe3\x5d\x9a\xd3\x54\x1b\x1d\x32\x70\x50\x22\xd4\x73\xbb\xaa\xe1\x3b\x31\x63\x41\x6a\x40\x5e\x26\x9b\xae\x97\x51\x0b\x0e\x3d\x56\x24\xe4\xfb\x21\x76\x9f\x51\xf1\x06\xab\xd6\x06\x13\x9b\x37\xe3\xca\xb5\xd9\x16\xf1\xf4\x50\x6b\x4f\x61\x78\xe2\x6b\x3a\x56\xc7\x0f\x35\xb1\x1c\xd0\xf0\x5d\xd4\xb0\x60\x31\x6e\xb5\xd3\xb5\x47\x27\x31\x7f\x35\xac\xd6\x30\x73\x6a\x16\x58\xa6\x4f\x73\x6a\x96\xb1\x71\x0a\xda\xed\x9b\x6f\xd4\xfc\xc4\xf2\x96\x30\x3f\x25\xf7\x74\x55\xfd\x27\xdf\xcc\x69\x8b\x6d\xc2\x5e\x1e\x66\x1b\x69\x5c\x9b\x92\xc5\x6b\x53\x8c\xb9\x53\xeb\x2b\x94\x28\xfe\x2c\x47\x74\xb3\xd9\xe0\x89\x35\x4f\xe5\x54\x92\xd0\x1e\xb2\x7f\xee\x80\x27\x24\xfc\x97\xca\x49\x73\xd6\xfd\x79\xba\xff\xf3\x21\xd1\xa5\xf8\xe1\x72\x3c\xab\x1e\x85\xde\x40\xf5\x8b\x93\x7f\x9c\x1d\xfc\x17\x7c\x04\xff\xd6\xfb\xd8\xf7\x93\xa7\xb3\x7d\xe3\xd0\xd9\xbe\x6f\x6a\xdf\x64\xfd\xdd\xbd\x50\x44\x75\xf4\x47\xfa\xcd\xc7\xc3\xe8\x98\xb6\xd6\xc2\x4e\xee\x29\x13\xd5\xaf\x84\x0f\x3b\x20\x7a\xe4\x6d\x45\x15\xea\x72\x6c\xf7\x1d\x82\xee\x90\x73\xe8\x46\xe6\x47\xeb\xf3\x23\x65\xde\x78\x5a\xdd\xf2\x72\xf0\x82\x61\x88\x9d\x93\x79\xe5\x92\x07\x3b\xbe\xbd\xd6\x31\x6d\x68\xc3\x17\xf4\x18\xf6\xfe\xe8\x72\x2f\xb0\xac\xe9\x55\x06\x17\xd6\x21\x59\x26\xbf\x03\x00\x00\xff\xff\xca\xdb\xd0\xe5\xca\x0f\x00\x00")

func swagger_json() ([]byte, error) {
	return bindata_read(
		_swagger_json,
		"swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"swagger.json": swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"swagger.json": &_bintree_t{swagger_json, map[string]*_bintree_t{}},
}}
