// Code generated by protoc-gen-go.
// source: app/pb/app.proto
// DO NOT EDIT!

/*
Package app is a generated protocol buffer package.

It is generated from these files:
	app/pb/app.proto

It has these top-level messages:
	EmptyMessage
	AuthRequestMessage
	AuthResponseMessage
	KeyValMessage
	SettingsMessage
	UserMessage
*/
package app

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AuthRequestMessage struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthRequestMessage) Reset()                    { *m = AuthRequestMessage{} }
func (m *AuthRequestMessage) String() string            { return proto.CompactTextString(m) }
func (*AuthRequestMessage) ProtoMessage()               {}
func (*AuthRequestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthRequestMessage) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthRequestMessage) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthResponseMessage struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AuthResponseMessage) Reset()                    { *m = AuthResponseMessage{} }
func (m *AuthResponseMessage) String() string            { return proto.CompactTextString(m) }
func (*AuthResponseMessage) ProtoMessage()               {}
func (*AuthResponseMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthResponseMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type KeyValMessage struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *KeyValMessage) Reset()                    { *m = KeyValMessage{} }
func (m *KeyValMessage) String() string            { return proto.CompactTextString(m) }
func (*KeyValMessage) ProtoMessage()               {}
func (*KeyValMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *KeyValMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SettingsMessage struct {
	Initialized bool   `protobuf:"varint,1,opt,name=initialized" json:"initialized,omitempty"`
	Debug       bool   `protobuf:"varint,2,opt,name=debug" json:"debug,omitempty"`
	LogLevel    string `protobuf:"bytes,3,opt,name=logLevel" json:"logLevel,omitempty"`
}

func (m *SettingsMessage) Reset()                    { *m = SettingsMessage{} }
func (m *SettingsMessage) String() string            { return proto.CompactTextString(m) }
func (*SettingsMessage) ProtoMessage()               {}
func (*SettingsMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SettingsMessage) GetInitialized() bool {
	if m != nil {
		return m.Initialized
	}
	return false
}

func (m *SettingsMessage) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *SettingsMessage) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

type UserMessage struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	Role     string `protobuf:"bytes,5,opt,name=role" json:"role,omitempty"`
	Phone    string `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
}

func (m *UserMessage) Reset()                    { *m = UserMessage{} }
func (m *UserMessage) String() string            { return proto.CompactTextString(m) }
func (*UserMessage) ProtoMessage()               {}
func (*UserMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserMessage) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserMessage) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserMessage) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *UserMessage) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "app.EmptyMessage")
	proto.RegisterType((*AuthRequestMessage)(nil), "app.AuthRequestMessage")
	proto.RegisterType((*AuthResponseMessage)(nil), "app.AuthResponseMessage")
	proto.RegisterType((*KeyValMessage)(nil), "app.KeyValMessage")
	proto.RegisterType((*SettingsMessage)(nil), "app.SettingsMessage")
	proto.RegisterType((*UserMessage)(nil), "app.UserMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	Auth(ctx context.Context, in *AuthRequestMessage, opts ...grpc.CallOption) (*AuthResponseMessage, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Auth(ctx context.Context, in *AuthRequestMessage, opts ...grpc.CallOption) (*AuthResponseMessage, error) {
	out := new(AuthResponseMessage)
	err := grpc.Invoke(ctx, "/app.Auth/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	Auth(context.Context, *AuthRequestMessage) (*AuthResponseMessage, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Auth/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Auth(ctx, req.(*AuthRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Auth_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/pb/app.proto",
}

// Client API for KeyVal service

type KeyValClient interface {
	KeyValCreate(ctx context.Context, in *KeyValMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	KeyValRead(ctx context.Context, in *KeyValMessage, opts ...grpc.CallOption) (*KeyValMessage, error)
	KeyValUpdate(ctx context.Context, in *KeyValMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	KeyValDelete(ctx context.Context, in *KeyValMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type keyValClient struct {
	cc *grpc.ClientConn
}

func NewKeyValClient(cc *grpc.ClientConn) KeyValClient {
	return &keyValClient{cc}
}

func (c *keyValClient) KeyValCreate(ctx context.Context, in *KeyValMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/app.KeyVal/KeyValCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValClient) KeyValRead(ctx context.Context, in *KeyValMessage, opts ...grpc.CallOption) (*KeyValMessage, error) {
	out := new(KeyValMessage)
	err := grpc.Invoke(ctx, "/app.KeyVal/KeyValRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValClient) KeyValUpdate(ctx context.Context, in *KeyValMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/app.KeyVal/KeyValUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValClient) KeyValDelete(ctx context.Context, in *KeyValMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/app.KeyVal/KeyValDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyVal service

type KeyValServer interface {
	KeyValCreate(context.Context, *KeyValMessage) (*EmptyMessage, error)
	KeyValRead(context.Context, *KeyValMessage) (*KeyValMessage, error)
	KeyValUpdate(context.Context, *KeyValMessage) (*EmptyMessage, error)
	KeyValDelete(context.Context, *KeyValMessage) (*EmptyMessage, error)
}

func RegisterKeyValServer(s *grpc.Server, srv KeyValServer) {
	s.RegisterService(&_KeyVal_serviceDesc, srv)
}

func _KeyVal_KeyValCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValServer).KeyValCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.KeyVal/KeyValCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValServer).KeyValCreate(ctx, req.(*KeyValMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyVal_KeyValRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValServer).KeyValRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.KeyVal/KeyValRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValServer).KeyValRead(ctx, req.(*KeyValMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyVal_KeyValUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValServer).KeyValUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.KeyVal/KeyValUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValServer).KeyValUpdate(ctx, req.(*KeyValMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyVal_KeyValDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValServer).KeyValDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.KeyVal/KeyValDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValServer).KeyValDelete(ctx, req.(*KeyValMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyVal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.KeyVal",
	HandlerType: (*KeyValServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeyValCreate",
			Handler:    _KeyVal_KeyValCreate_Handler,
		},
		{
			MethodName: "KeyValRead",
			Handler:    _KeyVal_KeyValRead_Handler,
		},
		{
			MethodName: "KeyValUpdate",
			Handler:    _KeyVal_KeyValUpdate_Handler,
		},
		{
			MethodName: "KeyValDelete",
			Handler:    _KeyVal_KeyValDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/pb/app.proto",
}

func init() { proto.RegisterFile("app/pb/app.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc7, 0x95, 0xb4, 0x5b, 0x95, 0xd9, 0x0f, 0x8a, 0x17, 0x44, 0x14, 0x38, 0xac, 0x7c, 0x42,
	0x45, 0xda, 0x88, 0xe5, 0x80, 0xb4, 0x37, 0xc4, 0xc7, 0x05, 0x58, 0xa4, 0xa0, 0xdd, 0xbb, 0xab,
	0x8c, 0x52, 0xab, 0xae, 0x6d, 0x62, 0xa7, 0x28, 0x20, 0x2e, 0xdc, 0x39, 0xf1, 0x64, 0x88, 0x57,
	0xe0, 0x41, 0x90, 0xed, 0x84, 0x26, 0x6a, 0x0f, 0x70, 0xca, 0xfc, 0xc7, 0xe3, 0x9f, 0xc7, 0xf3,
	0x8f, 0x61, 0xc6, 0xb4, 0xce, 0xf4, 0x22, 0x63, 0x5a, 0x9f, 0xeb, 0x4a, 0x59, 0x45, 0x46, 0x4c,
	0xeb, 0xf4, 0x61, 0xa9, 0x54, 0x29, 0x30, 0x63, 0x9a, 0x67, 0x4c, 0x4a, 0x65, 0x99, 0xe5, 0x4a,
	0x9a, 0x50, 0x42, 0x4f, 0xe0, 0xe8, 0xd5, 0x5a, 0xdb, 0xe6, 0x1d, 0x1a, 0xc3, 0x4a, 0xa4, 0xaf,
	0x81, 0x3c, 0xaf, 0xed, 0x32, 0xc7, 0x8f, 0x35, 0x1a, 0xdb, 0x66, 0xc9, 0x5d, 0x38, 0xc0, 0x35,
	0xe3, 0x22, 0x89, 0xce, 0xa2, 0x47, 0xb7, 0xf2, 0x20, 0x48, 0x0a, 0x53, 0xcd, 0x8c, 0xf9, 0xa4,
	0xaa, 0x22, 0x89, 0xfd, 0xc2, 0x5f, 0x4d, 0x1f, 0xc3, 0x69, 0xe0, 0x18, 0xad, 0xa4, 0xc1, 0x1e,
	0xc8, 0xaa, 0x15, 0xca, 0x0e, 0xe4, 0x05, 0x7d, 0x06, 0xc7, 0x6f, 0xb0, 0xb9, 0x61, 0xa2, 0x2b,
	0x9b, 0xc1, 0x68, 0x85, 0x4d, 0x5b, 0xe4, 0x42, 0xb7, 0x71, 0xc3, 0x44, 0x8d, 0xed, 0x41, 0x41,
	0x50, 0x84, 0xdb, 0x1f, 0xd0, 0x5a, 0x2e, 0x4b, 0xd3, 0x6d, 0x3d, 0x83, 0x43, 0x2e, 0xb9, 0xe5,
	0x4c, 0xf0, 0xcf, 0x58, 0x78, 0xc4, 0x34, 0xef, 0xa7, 0x1c, 0xaa, 0xc0, 0x45, 0x5d, 0x7a, 0xd4,
	0x34, 0x0f, 0xc2, 0x5d, 0x46, 0xa8, 0xf2, 0x2d, 0x6e, 0x50, 0x24, 0xa3, 0x70, 0x99, 0x4e, 0xd3,
	0xef, 0x11, 0x1c, 0x5e, 0x1b, 0xac, 0xba, 0x33, 0x4e, 0x20, 0xe6, 0x45, 0xdb, 0x5d, 0xcc, 0x8b,
	0xed, 0x78, 0xe2, 0xfe, 0x78, 0x08, 0x8c, 0x25, 0x5b, 0x63, 0x4b, 0xf3, 0xf1, 0x60, 0x64, 0xe3,
	0xe1, 0xc8, 0x5c, 0x7d, 0xa5, 0x04, 0x26, 0x07, 0xa1, 0xde, 0xc5, 0x8e, 0xac, 0x97, 0x4a, 0x62,
	0x32, 0x09, 0x64, 0x2f, 0x2e, 0x6e, 0x60, 0xec, 0x86, 0x4b, 0xae, 0xda, 0xef, 0xfd, 0x73, 0xe7,
	0xf9, 0xae, 0x6f, 0x69, 0xd2, 0x5b, 0x18, 0x18, 0x41, 0x4f, 0xbf, 0xfd, 0xfa, 0xfd, 0x23, 0x3e,
	0xa6, 0xd3, 0x6c, 0xf3, 0x24, 0x63, 0xb5, 0x5d, 0x5e, 0x46, 0xf3, 0x8b, 0x9f, 0x31, 0x4c, 0x82,
	0x11, 0x24, 0x87, 0xa3, 0x10, 0xbd, 0xa8, 0x90, 0x59, 0x24, 0xc4, 0x93, 0x06, 0x2e, 0xa5, 0x77,
	0x7c, 0x6e, 0xf0, 0xfb, 0x3c, 0xf0, 0xd8, 0x7b, 0xe9, 0xcc, 0x61, 0x57, 0xd8, 0x6c, 0x98, 0xc8,
	0xbe, 0xac, 0xb0, 0xf9, 0x7a, 0x19, 0xcd, 0xc9, 0x15, 0x40, 0x00, 0xe4, 0xc8, 0x8a, 0xbd, 0xc4,
	0x3d, 0x39, 0x9a, 0x78, 0x24, 0x21, 0x3b, 0xc8, 0x6d, 0x8f, 0xd7, 0xba, 0xf8, 0xff, 0x1e, 0xe9,
	0xde, 0x1e, 0xdf, 0x77, 0xcc, 0x97, 0x28, 0xf0, 0xdf, 0x99, 0x6d, 0x93, 0xf3, 0x1d, 0xe6, 0x62,
	0xe2, 0xdf, 0xd9, 0xd3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x57, 0x97, 0x4a, 0x7f, 0x9e, 0x03,
	0x00, 0x00,
}
